# Описание скрипта резервного копирования

Этот Bash-скрипт предназначен для автоматизированного резервного копирования данных из Ceph FS на локальную файловую систему с использованием утилиты `rclone`. Он синхронизирует данные из указанных директорий, очищает устаревшие резервные копии, проверяет состояние Ceph-кластера и валидирует бэкапы. Скрипт поддерживает параллельную обработку, подробное логирование и опциональное использование файла исключений. Ниже приведено описание его работы, разбитое на пункты.

## 1. Назначение скрипта
- **Основная цель**: Создание резервных копий данных из директорий `/ceph/data/users/` и `/ceph/data/groups/` на Ceph FS в локальные директории `/backup/main/ceph/data/users/` и `/backup/main/ceph/data/groups/`.
- **Функциональность**:
  - Синхронизация данных с помощью `rclone sync`.
  - Очистка данных старше 30 дней из директории `/backup/deleted`.
  - Проверка состояния Ceph-кластера и доступности исходных данных.
  - Частичная валидация бэкапов путём сравнения количества файлов.
  - Логирование всех операций и ошибок в файлы в `/var/log/backup`.
  - Параллельная обработка директорий (до 4 процессов).
  - Опциональное использование файла исключений для фильтрации данных.

## 2. Конфигурация скрипта
Скрипт использует следующие параметры, определённые в начале:
- **BACKUP_USER**: Имя пользователя для проверки прав доступа (`backup_user`).
- **LOGDIR**: Директория для логов (`/var/log/backup`).
- **LOCKFILE**: Файл блокировки для предотвращения одновременного запуска (`/var/lock/backup.lock`).
- **EXCLUDE_FILE**: Путь к опциональному файлу исключений для `rclone` (`/usr/local/bin/scripts/exclude-file.txt`).
- **DELETE_BACKUP**: Директория для перемещённых (удалённых) файлов (`/backup/deleted`).
- **MAIN_BACKUP**: Целевая директория для бэкапов (`/backup/main`).
- **SOURCEDIRS**: Массив исходных директорий (`/ceph/data/users/`, `/ceph/data/groups/`).
- **RCLONE_TRANSFERS**, **RCLONE_CHECKERS**, **RCLONE_RETRIES**: Параметры `rclone` для параллельных передач (30), проверок (8) и повторных попыток (5).
- **USE_EXCLUDE_FILE**: Булева переменная, указывающая, используется ли файл исключений (`true` или `false`).

## 3. Инициализация и логирование
- **Создание лога**:
  - Для каждого запуска создаётся файл лога с временной меткой, например, `/var/log/backup/backup_2025-05-23_15-31.log`.
  - Директория логов (`/var/log/backup`) создаётся, если не существует.
- **Ротация логов**:
  - Удаляются логи старше 30 дней.
  - Если в директории больше 100 логов, скрипт завершается с ошибкой.
- **Функция логирования**:
  - Функция `log` записывает сообщения с меткой времени и уровнем (INFO, WARNING, ERROR, DEBUG).
  - Сообщения выводятся в консоль и лог через `tee -a`.

## 4. Проверка конфигурации `rclone`
- **RCLONE_CONFIG**:
  - Проверяется наличие конфигурационного файла `rclone` с помощью `rclone config file`.
  - Если файл не найден, скрипт продолжает без параметра `--config`, что подходит для локальных операций.
  - Если файл найден, его путь логируется и экспортируется.
- **Параметры `rclone`**:
  - Экспортируются `RCLONE_TRANSFERS`, `RCLONE_CHECKERS`, `RCLONE_RETRIES` для команд `rclone`.

## 5. Проверка файла исключений
- **EXCLUDE_FILE**:
  - Проверяется существование файла `/usr/local/bin/scripts/exclude-file.txt`.
  - Если файл отсутствует, устанавливается `USE_EXCLUDE_FILE=false`, логируется предупреждение, и скрипт продолжает без `--exclude-from`.
  - Если файл существует, проверяются его читаемость и ненулевой размер:
    - При отсутствии прав на чтение скрипт завершается с ошибкой.
    - Если файл пустой, выдаётся предупреждение.
  - Содержимое файла логируется для отладки.
- **Повторная проверка**:
  - В функции `backup_dir` повторно проверяется файл исключений, если `USE_EXCLUDE_FILE=true`, для обеспечения доступа в фоновых процессах.

## 6. Механизм блокировки
- **LOCKFILE**:
  - Используется `flock` для создания файла блокировки `/var/lock/backup.lock`.
  - Если скрипт уже запущен, он завершается с ошибкой.
- **Очистка**:
  - Файл блокировки удаляется при завершении скрипта (нормальном или по сигналу `INT`/`TERM`) через `trap`.

## 7. Проверка Ceph FS
- **Функция `check_ceph_access`**:
  - Проверяет наличие `/ceph` в `/etc/fstab`.
  - Убеждается, что `/ceph` смонтирован (`mountpoint -q`).
  - При необходимости предпринимает до 5 попыток монтирования с интервалом 30 секунд.
  - Проверяет доступность `/ceph` и исходных директорий (`/ceph/data/users/`, `/ceph/data/groups/`) с помощью `ls`.
  - Проверяет состояние Ceph-кластера через SSH на `cephsvc05` (`podman exec ceph-mon-cephsvc05 ceph status`). Если SSH недоступен, проверка пропускается с предупреждением.
- **Обработка ошибок**:
  - При любой неудачной проверке возвращается ненулевой код, и скрипт завершается.

## 8. Очистка устаревших данных
- **Функция `cleanup_old_backups`**:
  - Очищает данные старше 30 дней из `/backup/deleted` с помощью `rclone purge --min-age 30d`.
  - Проверяет доступность директории `/backup/deleted`.
  - Использует `retry_command` (3 попытки с задержкой 10 секунд).
- **Логирование**:
  - Успех или ошибки логируются.
  - При ошибке очистки скрипт продолжает работу с предупреждением.

## 9. Резервное копирование директорий
- **Функция `backup_dir`**:
  - Принимает путь к исходной директории (например, `/ceph/data/users/`).
  - Создаёт целевую директорию в `/backup/main/ceph/...`, сохраняя структуру Ceph FS.
  - Проверяет доступность исходной директории и (при необходимости) файла исключений.
- **Команда `rclone sync`**:
  - Формируется через массив `RCLONE_FLAGS`:
    - `--progress`: Показ прогресса.
    - `--links`: Сохранение символических ссылок.
    - `--fast-list`: Оптимизация списков файлов.
    - `--create-empty-src-dirs`: Создание пустых директорий.
    - `--checksum`: Проверка по контрольным суммам.
    - `--transfers=30`, `--checkers=8`, `--retries=5`, `--retries-sleep=10s`: Параметры параллельности и повторных попыток.
    - `--update`: Копирование новых/изменённых файлов.
    - `--backup-dir=/backup/deleted/YYYY-MM-DD`: Перемещение удалённых файлов.
    - `--log-file`, `--log-level=INFO`: Логирование.
    - `--exclude-from` (если `USE_EXCLUDE_FILE=true`).
    - `--config` (при наличии `RCLONE_CONFIG`).
  - Выполняется с тремя попытками через `retry_command` (задержка 15 секунд).
- **Валидация**:
  - Функция `validate_backup` сравнивает количество файлов в исходной и целевой директориях (`rclone lsf --files-only`).
  - Успех или ошибка логируются.

## 10. Параллельная обработка
- **Функция `perform_backup`**:
  - Создаёт директории `/backup/main` и `/backup/deleted`.
  - Вызывает `check_ceph_access`, `cleanup_old_backups`.
  - Запускает `backup_dir` для каждой директории из `SOURCEDIRS` параллельно (до 4 процессов) через цикл `for` с фоновыми процессами и `wait -n`.
- **Экспорт**:
  - Экспортируются функции и переменные, включая `USE_EXCLUDE_FILE`, для фоновых процессов.

## 11. Основной поток выполнения
- **Инициализация**:
  - Логируются пользователь, права на `/ceph` и `/backup`, версия `rclone`, конфигурация и параметры.
- **Выполнение**:
  - Вызывается `perform_backup`.
  - При успехе логируется завершение; при ошибке — завершение с кодом 1.

## 12. Обработка ошибок
- **Повторные попытки**:
  - `retry_command` выполняет команды `rclone` до трёх раз (задержка 10 секунд для `purge`, 15 секунд для `sync`).
- **Проверки**:
  - Проверяются права, существование директорий, состояние Ceph.
  - Критичные ошибки завершают скрипт; некритичные (например, отсутствие файла исключений) логируются как WARNING.
- **Файл исключений**:
  - Отсутствие файла обрабатывается как некритичное событие, и `--exclude-from` не включается.

## 13. Логирование и отладка
- **Лог-файл**:
  - Записываются все операции, команды `rclone`, их попытки и результаты.
  - Уровни: INFO (события), WARNING (некритичные проблемы), ERROR (критичные ошибки), DEBUG (детали команд).
- **Отладка**:
  - Логируется содержимое файла исключений (если используется).
  - Выводятся полные команды `rclone`.
  - Проверки прав и состояния системы документируются.

## 14. Зависимости
- **Утилиты**:
  - `rclone` (версия 1.62.2 или выше).
  - `bash`, `flock`, `find`, `tee`, `mountpoint`, `ls`, `cat`, `awk`.
  - `ssh` (опционально) для проверки Ceph.
- **Система**:
  - Доступ к Ceph FS через `/ceph`.
  - Права на чтение `/ceph` и запись в `/backup`.
  - Беспарольный SSH-доступ к `cephsvc05` (если используется).

## 15. Ограничения и особенности
- **Локальные операции**: Работает с локальными путями, так как `RCLONE_CONFIG` часто пустая.
- **Параллелизм**: Ограничен 4 процессами, что подходит для двух директорий.
- **Файл исключений**: Опционален; если отсутствует, бэкап выполняется без фильтрации.
- **Валидация**: Проверяет только количество файлов.
- **SSH**: Проверка Ceph через SSH не критична и пропускается при отсутствии доступа.

## 16. Пример работы
1. Запуск скрипта как `root`.
2. Создаётся лог `/var/log/backup/backup_2025-05-23_15-31.log`.
3. Проверяются блокировка, Ceph FS, файл исключений.
4. Удаляются данные старше 30 дней из `/backup/deleted`.
5. Выполняется `rclone sync` для `/ceph/data/users/` и `/ceph/data/groups/` в `/backup/main/ceph/...`.
6. Проверяется количество файлов.
7. Логируются результаты, и скрипт завершается.

## 17. Рекомендации по использованию
- **Проверка прав**:
  - Убедитесь, что `root` имеет доступ к `/ceph`, `/backup` и (при необходимости) `/usr/local/bin/scripts/exclude-file.txt`.
  - Проверьте права скрипта:
    ```bash
    chmod 755 /path/to/rclone_backup.sh
    ```
- **Файл исключений**:
  - Если нужна фильтрация, создайте `/usr/local/bin/scripts/exclude-file.txt`:
    ```bash
    echo -e "subdir1/**\nsubdir2/**" > /usr/local/bin/scripts/exclude-file.txt
    chmod 644 /usr/local/bin/scripts/exclude-file.txt
    ```
- **Логи**:
  - Анализируйте `/var/log/backup` для диагностики.
- **Тестирование**:
  - Протестируйте на небольшом наборе данных:
    ```bash
    /path/to/rclone_backup.sh
    ```
- **SSH**:
  - Настройте беспарольный SSH-доступ к `cephsvc05`:
    ```bash
    ssh-copy-id cephsvc05
    ```
- **Обновление `rclone`**:
  - Рассмотрите последнюю версию `rclone`:
    ```bash
    rclone --version
    ```