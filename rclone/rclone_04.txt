Описание скрипта резервного копирования
Этот скрипт написан на Bash и предназначен для автоматизированного резервного копирования данных из Ceph FS на локальную файловую систему с использованием утилиты rclone. Скрипт выполняет синхронизацию данных, очистку устаревших резервных копий, проверку состояния Ceph-кластера и валидацию бэкапов. Он включает механизмы обработки ошибок, повторных попыток и логирования. Ниже приведено подробное описание его работы, разбитое на пункты.
1. Назначение скрипта

Основная цель: Создание резервных копий данных из директории /ceph/data/exp/idream/ на Ceph FS в локальную директорию /backup/main/ceph/data/exp/idream/.
Функциональность:
Синхронизация данных с помощью rclone sync.
Очистка устаревших данных (старше 30 дней) из директории /backup/deleted.
Проверка состояния Ceph-кластера и доступности исходных данных.
Частичная валидация бэкапов путём сравнения количества файлов в исходной и целевой директориях.
Логирование всех операций и ошибок в файлы в /var/log/backup.
Параллельная обработка нескольких директорий (хотя в текущей конфигурации используется только одна).



2. Конфигурация скрипта
Скрипт использует следующие конфигурационные параметры, определённые в начале:

BACKUP_USER: Имя пользователя для проверки прав доступа (backup_user).
LOGDIR: Директория для логов (/var/log/backup).
LOCKFILE: Файл блокировки для предотвращения одновременного запуска (/var/lock/backup.lock).
EXCLUDE_FILE: Путь к файлу исключений для rclone (/usr/local/bin/scripts/exclude-file.txt), содержащему фильтры, такие как data/** и data3/**.
DELETE_BACKUP: Директория для перемещённых (удалённых) файлов (/backup/deleted).
MAIN_BACKUP: Целевая директория для бэкапов (/backup/main).
SOURCEDIRS: Массив исходных директорий для бэкапа (в текущей версии только /ceph/data/exp/idream/).
RCLONE_TRANSFERS, RCLONE_CHECKERS, RCLONE_RETRIES: Параметры rclone для параллельных передач (30), проверок (8) и повторных попыток (5).

3. Инициализация и логирование

Создание лога:
Для каждого запуска создаётся файл лога с временной меткой, например, /var/log/backup/backup_2025-05-23_12-36.log.
Директория логов (/var/log/backup) создаётся, если не существует.


Ротация логов:
Удаляются логи старше 30 дней.
Если в директории больше 100 логов, скрипт завершается с ошибкой.


Функция логирования:
Функция log записывает сообщения в лог с меткой времени и уровнем (INFO, WARNING, ERROR, DEBUG).
Сообщения также выводятся в консоль через tee -a.



4. Проверка конфигурации rclone

RCLONE_CONFIG:
Проверяется наличие конфигурационного файла rclone с помощью rclone config file.
Если файл не найден, скрипт продолжает работу без параметра --config, что подходит для локальных операций.
Если файл найден, его путь логируется и экспортируется в переменную окружения.


Параметры rclone:
Экспортируются переменные RCLONE_TRANSFERS, RCLONE_CHECKERS, RCLONE_RETRIES для использования в командах rclone.



5. Проверка файла исключений

EXCLUDE_FILE:
Проверяется существование файла /usr/local/bin/scripts/exclude-file.txt.
Проверяется его читаемость и ненулевой размер.
Содержимое файла логируется для отладки (например, data/**, data3/**).
Если файл отсутствует, недоступен для чтения или пустой, скрипт завершается с ошибкой или выдаёт предупреждение.


Дополнительная проверка:
В функции backup_dir повторно проверяется доступность и содержимое файла исключений, чтобы учесть возможные проблемы в дочерних процессах.



6. Механизм блокировки

LOCKFILE:
Используется flock для создания файла блокировки /var/lock/backup.lock.
Если скрипт уже запущен, он завершается с ошибкой, чтобы избежать параллельного выполнения.


Очистка:
Файл блокировки удаляется при завершении скрипта (нормальном или по сигналу INT/TERM) с помощью trap.



7. Проверка Ceph FS

Функция check_ceph_access:
Проверяет наличие /ceph в /etc/fstab.
Убеждается, что /ceph смонтирован (используется mountpoint -q).
Если /ceph не смонтирован, предпринимается до 5 попыток монтирования с интервалом 30 секунд.
Проверяет доступность /ceph и исходных директорий (/ceph/data/exp/idream/) с помощью ls.
Проверяет состояние Ceph-кластера через SSH на cephsvc05 с командой podman exec ceph-mon-cephsvc05 ceph status. Если SSH недоступен, проверка пропускается с предупреждением.


Обработка ошибок:
Если какая-либо проверка не пройдена, функция возвращает ненулевой код возврата, и скрипт завершается.



8. Очистка устаревших данных

Функция cleanup_old_backups:
Очищает данные старше 30 дней из директории /backup/deleted с помощью команды rclone purge --min-age 30d.
Проверяет доступность директории /backup/deleted.
Использует механизм повторных попыток (3 попытки с задержкой 10 секунд) через функцию retry_command.


Логирование:
Успешное выполнение или ошибки логируются.
Если очистка завершилась с ошибкой, скрипт продолжает работу с предупреждением.



9. Резервное копирование директорий

Функция backup_dir:
Принимает путь к исходной директории (например, /ceph/data/exp/idream/).
Создаёт целевую директорию в /backup/main/ceph/..., сохраняя структуру Ceph FS.
Проверяет доступность исходной директории с помощью ls.
Повторно проверяет доступность и содержимое файла исключений.


Команда rclone sync:
Формируется с использованием массива RCLONE_FLAGS, содержащего параметры:
--progress: Отображение прогресса.
--links: Сохранение символических ссылок.
--fast-list: Оптимизация списков файлов.
--create-empty-src-dirs: Создание пустых директорий.
--checksum: Проверка по контрольным суммам.
--transfers=30, --checkers=8, --retries=5, --retries-sleep=10s: Параметры параллельности и повторных попыток.
--update: Копирование только новых или изменённых файлов.
--backup-dir=/backup/deleted/YYYY-MM-DD: Перемещение удалённых файлов в директорию с текущей датой.
--log-file, --log-level=INFO: Логирование в файл.
--exclude-from=/usr/local/bin/scripts/exclude-file.txt: Исключение файлов/директорий, указанных в файле.
--config (если RCLONE_CONFIG не пустая).


Команда выполняется с тремя попытками через retry_command с задержкой 15 секунд.


Валидация:
После синхронизации вызывается функция validate_backup, которая сравнивает количество файлов в исходной и целевой директориях с помощью rclone lsf --files-only.
Если количество совпадает, валидация считается успешной; иначе фиксируется ошибка.



10. Параллельная обработка

Функция perform_backup:
Создаёт директории /backup/main и /backup/deleted.
Вызывает check_ceph_access для проверки Ceph FS.
Вызывает cleanup_old_backups для очистки устаревших данных.
Запускает backup_dir для каждой директории из массива SOURCEDIRS параллельно (до 4 процессов) с помощью xargs -P4.


Экспорт:
Все функции и ключевые переменные (включая EXCLUDE_FILE) экспортируются для использования в дочерних процессах bash, вызываемых через xargs.



11. Основной поток выполнения

Инициализация:
Логируются начальные данные: пользователь, права на /ceph и /backup, версия rclone, конфигурация и параметры.


Выполнение:
Вызывается perform_backup.
Если функция возвращает нулевой код возврата, логируется успешное завершение.
Если возвращён ненулевой код, логируется ошибка, и скрипт завершается с кодом 1.



12. Обработка ошибок

Повторные попытки:
Функция retry_command обеспечивает до трёх попыток выполнения команд rclone с задержкой (10 секунд для purge, 15 секунд для sync).


Проверки:
Проверяются права доступа, существование файлов и директорий, состояние Ceph-кластера.
Ошибки логируются с уровнем ERROR, и скрипт завершается, если они критичны.


Предупреждения:
Некритичные проблемы (например, недоступность SSH или проблемы с очисткой) логируются как WARNING, и скрипт продолжает работу.



13. Логирование и отладка

Лог-файл:
Все операции, включая команды rclone, их попытки и результаты, записываются в лог.
Уровни лога: INFO (основные события), WARNING (некритичные проблемы), ERROR (критичные ошибки), DEBUG (детали команд).


Отладочная информация:
Логируется содержимое файла исключений.
Выводятся полные команды rclone перед выполнением.
Проверки прав доступа и состояния системы подробно документируются.



14. Зависимости

Утилиты:
rclone (версия 1.62.2 или выше) для синхронизации и очистки.
bash, flock, find, xargs, tee, mountpoint, ls, cat, awk для работы скрипта.
ssh (опционально) для проверки состояния Ceph.


Система:
Доступ к Ceph FS через точку монтирования /ceph.
Права на чтение /ceph и запись в /backup.
Беспарольный SSH-доступ к cephsvc05 для проверки Ceph (если используется).



15. Ограничения и особенности

Локальные операции: Скрипт работает с локальными путями (/ceph и /backup), так как RCLONE_CONFIG пустая. Для удалённых хранилищ требуется настройка rclone.
Параллелизм: Ограничен 4 процессами (xargs -P4), что подходит для одной директории, но может быть увеличено при необходимости.
Файл исключений: Требует корректных фильтров rclone и доступности для чтения.
Валидация: Проверяет только количество файлов, а не их содержимое.
SSH: Проверка Ceph через SSH не критична и пропускается при отсутствии доступа.

16. Пример работы

Скрипт запускается как root.
Создаётся лог /var/log/backup/backup_2025-05-23_12-36.log.
Проверяется блокировка, Ceph FS, файл исключений.
Удаляются данные старше 30 дней из /backup/deleted.
Выполняется rclone sync для /ceph/data/exp/idream/ в /backup/main/ceph/data/exp/idream/, исключая data/** и data3/**.
Проверяется количество файлов в исходной и целевой директориях.
Логируются результаты, и скрипт завершается с соответствующим статусом.

17. Рекомендации по использованию

Проверка прав: Убедитесь, что root имеет доступ к /ceph, /backup и /usr/local/bin/scripts/exclude-file.txt.
Файл исключений: Регулярно проверяйте содержимое /usr/local/bin/scripts/exclude-file.txt на актуальность.
Логи: Анализируйте логи в /var/log/backup для диагностики проблем.
Тестирование: Перед использованием в продакшене протестируйте на небольшом наборе данных.
SSH: Настройте беспарольный SSH-доступ к cephsvc05 для проверки Ceph.
Обновление rclone: Рассмотрите обновление до последней версии для улучшения производительности.