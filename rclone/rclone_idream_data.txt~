**Подробное описание Bash-скрипта для резервного копирования**

---
Скрипт предназначен для резервного копирования данных из директорий Ceph в локальное хранилище с использованием утилиты rclone. Он включает проверки целостности, обработку ошибок, логирование и параллельное выполнение задач.

### **1. Логирование**
Цель: Создание уникального лог-файла для каждого запуска

TIMESTAMP=$(date +'%Y-%m-%d_%H-%M')
LOGDIR="/var/log/backup"
LOGFILE="$LOGDIR/backup_$TIMESTAMP.log"
mkdir -p "$LOGDIR" || { echo "Не удалось создать $LOGDIR" >&2; exit 1; }
```
- **Что делает**:
  - Создает уникальный лог-файл с временной меткой.
  - Гарантирует наличие директории- LOGDIR для логов (`mkdir -p`).
- **Особенности**:
  - Если создание директории не удалось — скрипт завершается с ошибкой.

---

### **2. Конфигурация Rclone**
Цель: Определение пути к конфигурационному файлу rclone

RCLONE_CONFIG=$(rclone config file | awk -F': ' '{print $2}' | xargs)
export RCLONE_CONFIG
```
- **Что делает**:
  - Определяет путь к конфигурационному файлу Rclone.
  - Экспортирует переменную окружения для доступности в подпроцессах.
- **Особенности**:
  - Использует `awk` для извлечения пути из вывода `rclone config file`.

---

### **3. Настройки производительности Rclone**
Цель: Управление параллелизмом и повторными попытками

RCLONE_TRANSFERS=${RCLONE_TRANSFERS:-30}
RCLONE_RETRIES=${RCLONE_RETRIES:-5}
export RCLONE_TRANSFERS RCLONE_RETRIES
```
- **Что делает**:
  - Задает количество одновременных передач (`transfers`) и повторных попыток (`retries`) для Rclone.
  - Значения по умолчанию: 30 потоков и 5 повторов.

---

### **4. Блокировка повторного запуска**
Цель: Предотвращение параллельного выполнения скрипта

LOCKFILE="/var/lock/backup.lock"
if ! ( set -o noclobber; echo "$$" > "$LOCKFILE" ) 2> /dev/null; then
    echo "Скрипт уже запущен. Выход." >&2 | tee -a "$LOGFILE"
    exit 1
fi
trap 'rm -f "$LOCKFILE"; exit $?' INT TERM EXIT
```
- **Что делает**:
  - Создает файл блокировки (`LOCKFILE`), чтобы предотвратить одновременные запуски. Если он уже существует, скрипт завершается.
  - trap удаляет файл блокировки при завершении скрипта (даже аварийном включая прерывания: INT, TERM, EXIT).

---

### **5. Настройки путей**
Цель: Определение путей для хранения данных и их источника

DELETE_BACKUP="/backup/deleted"
MAIN_BACKUP="/backup/main"
SOURCEDIRS=(
    "/ceph/data/exp/idream/data/"
    "/ceph/data/exp/idream/data3/"
)
```
- **Что делает**:
  - Определяет пути для хранения бэкапов (`MAIN_BACKUP`), удаленных файлов (`DELETE_BACKUP`) и исходных данных (`SOURCEDIRS`).

---

### **6. Функция логирования**
Цель: Унифицированное логирование событий

log() {
    local level=${1:-ERROR}
    local msg="${2}"
    echo "$(date +'%Y-%m-%d %T') [$level] $msg" | tee -a "$LOGFILE"
}
```
- **Что делает**:
  - Логирует сообщения с временной меткой и уровнем (INFO, WARNING, ERROR) и временем.
  - Выводит сообщения как в консоль, так и в лог-файл.

---

### **7. Функция повторных попыток**
Цель: Повторное выполнение команды при ошибках

retry_command() {
    local cmd="$1"
    local retries=${2:-3}
    local delay=${3:-10}
    # ... выполнение команды с повторами
}
```
- **Что делает**:
  - Выполняет команду несколько раз с задержкой в случае ошибки.
  - Используется для ненадежных операций (например, сетевые запросы).
  - Логирует каждую попытку и возвращает статус успеха/провала.

---

### **8. Проверка монтирования (доступа) Ceph**
Цель: Убедиться, что Ceph смонтирован и доступен

check_ceph_access() {
    # Проверка fstab, монтирования, прав доступа и наличия директорий
}
```
- **Что делает**:
  - Убеждается, что Ceph смонтирован и доступен.
  - Перемонтирует Ceph до 5 раз при ошибках.
  - Проверяет права доступа к /ceph и существование исходных директорий.

---

### **9. Проверка свободного места**
Цель: Убедиться, что на диске достаточно места для бэкапа

check_disk_space() {
    local free=$(df -BG "$path" | awk 'NR==2 {print $4}' | tr -d 'G')
    # ... сравнение с требуемым объемом
}
```
- **Что делает**:
  - Проверяет, достаточно ли места (в гигабайтах) на диске для бэкапа.
  - Если места меньше required_gb, возвращает ошибку.

---

### **10. Валидация бэкапа**
Цель: Сравнение исходных и скопированных данных

validate_backup() {
    rclone check "$src" "$dst" --config="$RCLONE_CONFIG"
}
```
- **Что делает**:
  - Сравнивает исходную директорию и бэкап. Использует rclone check для проверки целостности файлов.
  - Гарантирует целостность данных.
  - Логирует успех или ошибку валидации.

---

### **11. Очистка старых бэкапов**
Цель: Очистка старых бэкапов и логов

cleanup_old_backups() {
    rclone purge --min-age 30d "$DELETE_BACKUP"
    find "$LOGDIR" -type f -name 'backup_*' -mtime +30 -delete
}
```
- **Что делает**:
  - Удаляет бэкапы из DELETE_BACKUP старше 30 дней через rclone purge.
  - Удаляет логи старше 30 дней командой find.

---

### **12. Обработка отдельной директории**
Цель: Копирование одной директории через rclone.

backup_dir() {
    # Формирование пути назначения, проверка доступа, синхронизация через Rclone
}
```
- **Что делает**:
  - Использует rclone sync для синхронизации.
  - Перемещает удаленные/измененные файлы в DELETE_BACKUP.
  - Копирует одну директорию в `MAIN_BACKUP`.
  - Настраивает параметры производительности. Использует Rclone с настройками: проверка контрольных сумм, многопоточность, ретраи.

---

### **13. Основная функция бэкапа**
Цель: Координация всех этапов бэкапа

perform_backup() {
    # Подготовка директорий, проверки, очистка, параллельная обработка
}
```
- **Что делает**:
  - Управляет всем процессом: проверки, очистка, запуск бэкапа в 4 потока (`xargs -P4`).

---

### **14. Основной поток**
Цель: Инициализация и завершение скрипта

log INFO "***** Начат процесс резервного копирования *****"
# ... логирование параметров и запуск perform_backup
```
- **Что делает**:
  - Логирует старт скрипта, информацию о пользователе, правах, проверяет версию Rclone. Вызывает perform_backup()- запускает бэкап.
  - Возвращает код ошибки, если бэкап не удался (обрабатывает итоговый статус).

---

### **Ключевые особенности скрипта**
1. **Надежность**:
   - Проверки монтирования, прав, свободного места.
   - Повторные попытки операций и валидация данных.
2. **Производительность**:
   - Параллельная обработка директорий (`xargs -P4`).
   - Настройка Rclone для многопоточности (`transfers=30`).
3. **Безопасность**:
   - Блокировка повторных запусков.
   - Логирование всех действий.
   - Обработка прерываний.
4. **Автоматизация**:
   - Очистка устаревших данных и логов.
5. **Гибкость**:
   -

---

**Рекомендации по улучшению**:
- Добавить проверку версии Rclone.
- Настроить отправку уведомлений об ошибках (email, Telegram).
- Убедиться, что `rclone config file` возвращает ожидаемый путь.
- Проверить, не конфликтует ли принудительное размонтирование Ceph (`umount -fl`) с активными процессами.
